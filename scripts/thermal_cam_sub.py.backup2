#!/usr/bin/python3
# Description:
# - Subscribes to real-time streaming video from your built-in webcam and saves photos in PNG format.
#
# Author:
# - Wenderson Ferreira

import rospy  # Python library for ROS
from sensor_msgs.msg import Image  # Image is the message type
from cv_bridge import CvBridge  # Package to convert between ROS and OpenCV Images
import cv2  # OpenCV library
import time  # Time library

def save_photo(current_frame):
    # Get the current time for unique filenames
    hms = time.strftime('%H:%M:%S', time.localtime())

    # Create a unique filename based on the current time
    file_name = 'photo_' + hms + '.png'

    # Convert the image to RGB colorspace before saving
    rgb_frame = cv2.cvtColor(current_frame, cv2.COLOR_BGR2RGB)

    # Save the RGB frame (photo) to disk in PNG format with high quality
    cv2.imwrite(file_name, rgb_frame, [cv2.IMWRITE_PNG_COMPRESSION, 0])

    rospy.loginfo("Photo saved: %s", file_name)

def callback(data):
    # Used to convert between ROS and OpenCV images
    br = CvBridge()

    # Convert ROS Image message to OpenCV image
    current_frame = br.imgmsg_to_cv2(data)

    # Save the photo
    save_photo(current_frame)

def receive_message():
    # Tells rospy the name of the node.
    # Anonymous = True makes sure the node has a unique name. Random
    # numbers are added to the end of the name.
    rospy.init_node('thermal_sub_py', anonymous=True)

    # Node is subscribing to the video_frames topic
    rospy.Subscriber('thermal_frames', Image, callback)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    receive_message()

